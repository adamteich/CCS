clear
clc

alphas= [0.15, 0.4, 0.8];

beta = .5;
num_hands = 10000;
starting_cash = 100;
bust_limit = 7;

for i=1:length(alphas)
    for j=1:300
             middle_cards = randi([1 5], num_hands, 1);
            self_cards = randi([1 5], num_hands, 1);
            competitor_cards = randi([1 5], num_hands, 1);

            % for now, let's have the opponent fold only when they know they'll bust
            for z=1:num_hands
                if competitor_cards(z) + middle_cards(z) >= bust_limit
                    competitor_actions(z) = 0;
                else
                    competitor_actions(z) = 1;
                end
            end

            % opponent can bluff (play on a bust instead of folding) a given proportion of the time
            bluffProportion = 0.25;
            competitor_bluff_indexes=[];
            
            for s=1:length(competitor_actions)
                if competitor_actions(s)==0 && rand<bluffProportion
                    competitor_actions(s)=1;
                    if (s<length(competitor_actions))
                    competitor_bluff_indexes(length(competitor_bluff_indexes)+1)=s;
                    end
                end
            end
        output = poker_simulation(alphas(i), beta, competitor_cards, competitor_actions, middle_cards, self_cards, starting_cash, bust_limit);
        bust(i,j)= output.player_balance(end);
        competitor_bluff_index_shortened=[];
        W=1;
        while W<length(competitor_bluff_indexes) && competitor_bluff_indexes(W)<length(output.reward)-1
            2+2;
            competitor_bluff_index_shortened(end+1)=competitor_bluff_indexes(W);
            W=W+1;
        end
        
        
        if length(competitor_bluff_index_shortened)>0
         N1=length((output.player_actions(competitor_bluff_index_shortened+1)));
            N2=length(output.player_actions);

            post_bluff=output.player_actions(competitor_bluff_index_shortened+1);
            n1=length(post_bluff(post_bluff==1));
            n2= length(output.player_actions(output.player_actions==1));

            p0 = (n1+n2) / (N1+N2);
              n10 = N1 * p0;
              n20 = N2 * p0;
            observed = [n1 N1-n1 n2 N2-n2];
                   expected = [n10 N1-n10 n20 N2-n20];
                   chi2stat = sum((observed-expected).^2 ./ expected);
                   p = 1 - chi2cdf(chi2stat,1);
                   %chi^2 test code via https://www.mathworks.com/matlabcentral/answers/96572-how-can-i-perform-a-chi-square-test-to-determine-how-statistically-different-two-proportions-are-in
            different_behavior(i,j)=p <0.1;
        end
    end
    
end
mean(bust,2)
ttest2(bust(1,:), bust(2,:))
ttest2(bust(2,:), bust(3,:))
mean(different_behavior,2) 
ttest2(different_behavior(1,:),different_behavior(2,:))
 %if =1, then our model implements the gamblers fallacy, playing
 %differently after getting bluffed every time






